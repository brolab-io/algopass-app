/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from "@algorandfoundation/algokit-utils";
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from "@algorandfoundation/algokit-utils/types/app";
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from "@algorandfoundation/algokit-utils/types/app-client";
import type { AppSpec } from "@algorandfoundation/algokit-utils/types/app-spec";
import type {
  SendTransactionResult,
  TransactionToSign,
  SendTransactionFrom,
} from "@algorandfoundation/algokit-utils/types/transaction";
import type { TransactionWithSigner } from "algosdk";
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer } from "algosdk";
export const APP_SPEC: AppSpec = {
  hints: {
    "init_profile(pay,(string,string)[])bool": {
      call_config: {
        no_op: "CALL",
      },
    },
    "update_profile(string,string,string,(string,string)[])(string,string,string,(string,string)[])":
      {
        structs: {
          output: {
            name: "UserRecord",
            elements: [
              ["name", "string"],
              ["bio", "string"],
              ["uri", "string"],
              ["urls", "(string,string)[]"],
            ],
          },
        },
        call_config: {
          no_op: "CALL",
        },
      },
    "get_profile(address)(string,string,string,(string,string)[])": {
      read_only: true,
      structs: {
        output: {
          name: "UserRecord",
          elements: [
            ["name", "string"],
            ["bio", "string"],
            ["uri", "string"],
            ["urls", "(string,string)[]"],
          ],
        },
      },
      call_config: {
        no_op: "CALL",
      },
    },
    "update_fee(uint64)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "hello(string)string": {
      call_config: {
        no_op: "CALL",
      },
    },
  },
  source: {
    approval:
      "",
    clear: "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu",
  },
  state: {
    global: {
      num_byte_slices: 0,
      num_uints: 2,
    },
    local: {
      num_byte_slices: 0,
      num_uints: 0,
    },
  },
  schema: {
    global: {
      declared: {
        g_counter: {
          type: "uint64",
          key: "g_counter",
          descr: "For user counter",
        },
        g_fee: {
          type: "uint64",
          key: "g_fee",
          descr: "Fee to create profile",
        },
      },
      reserved: {},
    },
    local: {
      declared: {},
      reserved: {},
    },
  },
  contract: {
    name: "algopass",
    methods: [
      {
        name: "init_profile",
        args: [
          {
            type: "pay",
            name: "payment",
          },
          {
            type: "(string,string)[]",
            name: "urls",
          },
        ],
        returns: {
          type: "bool",
        },
      },
      {
        name: "update_profile",
        args: [
          {
            type: "string",
            name: "name",
          },
          {
            type: "string",
            name: "bio",
          },
          {
            type: "string",
            name: "uri",
          },
          {
            type: "(string,string)[]",
            name: "urls",
          },
        ],
        returns: {
          type: "(string,string,string,(string,string)[])",
        },
      },
      {
        name: "get_profile",
        args: [
          {
            type: "address",
            name: "user",
          },
        ],
        returns: {
          type: "(string,string,string,(string,string)[])",
        },
      },
      {
        name: "update_fee",
        args: [
          {
            type: "uint64",
            name: "fee",
          },
        ],
        returns: {
          type: "void",
        },
      },
      {
        name: "hello",
        args: [
          {
            type: "string",
            name: "name",
          },
        ],
        returns: {
          type: "string",
        },
      },
    ],
    networks: {},
  },
  bare_call_config: {
    delete_application: "CALL",
    no_op: "CREATE",
    update_application: "CALL",
  },
};

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp = { onCompleteAction?: "no_op" | OnApplicationComplete.NoOpOC };
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn = { onCompleteAction: "opt_in" | OnApplicationComplete.OptInOC };
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut = {
  onCompleteAction: "close_out" | OnApplicationComplete.CloseOutOC;
};
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp = {
  onCompleteAction: "delete_application" | OnApplicationComplete.DeleteApplicationOC;
};
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp = {
  onCompleteAction: "update_application" | OnApplicationComplete.UpdateApplicationOC;
};
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt
   */
  asBigInt(): bigint;
  /**
   * Gets the state value as a number.
   */
  asNumber(): number;
};
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array;
  /**
   * Gets the state value as a string
   */
  asString(): string;
};

/**
 * Defines the types of available calls and state of the Algopass smart contract.
 */
export type Algopass = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods: Record<
    "init_profile(pay,(string,string)[])bool" | "init_profile",
    {
      argsObj: {
        payment: TransactionToSign | Transaction | Promise<SendTransactionResult>;
        urls: [string, string][];
      };
      argsTuple: [
        payment: TransactionToSign | Transaction | Promise<SendTransactionResult>,
        urls: [string, string][]
      ];
      returns: boolean;
    }
  > &
    Record<
      | "update_profile(string,string,string,(string,string)[])(string,string,string,(string,string)[])"
      | "update_profile",
      {
        argsObj: {
          name: string;
          bio: string;
          uri: string;
          urls: [string, string][];
        };
        argsTuple: [name: string, bio: string, uri: string, urls: [string, string][]];
        returns: UserRecord;
      }
    > &
    Record<
      "get_profile(address)(string,string,string,(string,string)[])" | "get_profile",
      {
        argsObj: {
          user: string;
        };
        argsTuple: [user: string];
        returns: UserRecord;
      }
    > &
    Record<
      "update_fee(uint64)void" | "update_fee",
      {
        argsObj: {
          fee: bigint | number;
        };
        argsTuple: [fee: bigint | number];
        returns: void;
      }
    > &
    Record<
      "hello(string)string" | "hello",
      {
        argsObj: {
          name: string;
        };
        argsTuple: [name: string];
        returns: string;
      }
    >;
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      /**
       * For user counter
       */
      g_counter?: IntegerState;
      /**
       * Fee to create profile
       */
      g_fee?: IntegerState;
    };
  };
};
/**
 * Defines the possible abi call signatures
 */
export type AlgopassSig = keyof Algopass["methods"];
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends AlgopassSig | undefined> = {
  method: TSignature;
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>;
} & AppClientCallCoreParams &
  CoreAppCallArgs;
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>;
/**
 * Represents a UserRecord result as a struct
 */
export type UserRecord = {
  name: string;
  bio: string;
  uri: string;
  urls: [string, string][];
};
/**
 * Converts the tuple representation of a UserRecord to the struct representation
 */
export function UserRecord([name, bio, uri, urls]: [string, string, string, [string, string][]]) {
  return {
    name,
    bio,
    uri,
    urls,
  };
}
/**
 * Maps a method signature from the Algopass smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends AlgopassSig> = Algopass["methods"][TSignature][
  | "argsObj"
  | "argsTuple"];
/**
 * Maps a method signature from the Algopass smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AlgopassSig> =
  Algopass["methods"][TSignature]["returns"];

/**
 * A factory for available 'create' calls
 */
export type AlgopassCreateCalls = (typeof AlgopassCallFactory)["create"];
/**
 * Defines supported create methods for this smart contract
 */
export type AlgopassCreateCallParams = TypedCallParams<undefined> & OnCompleteNoOp;
/**
 * A factory for available 'update' calls
 */
export type AlgopassUpdateCalls = (typeof AlgopassCallFactory)["update"];
/**
 * Defines supported update methods for this smart contract
 */
export type AlgopassUpdateCallParams = TypedCallParams<undefined>;
/**
 * A factory for available 'delete' calls
 */
export type AlgopassDeleteCalls = (typeof AlgopassCallFactory)["delete"];
/**
 * Defines supported delete methods for this smart contract
 */
export type AlgopassDeleteCallParams = TypedCallParams<undefined>;
/**
 * Defines arguments required for the deploy method.
 */
export type AlgopassDeployArgs = {
  deployTimeParams?: TealTemplateParams;
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: AlgopassCreateCalls) => AlgopassCreateCallParams;
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: AlgopassUpdateCalls) => AlgopassUpdateCallParams;
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: AlgopassDeleteCalls) => AlgopassDeleteCallParams;
};

/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class AlgopassCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the algopass smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(
        params: BareCallArgs &
          AppClientCallCoreParams &
          CoreAppCallArgs &
          AppClientCompilationParams &
          OnCompleteNoOp = {}
      ) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        };
      },
    };
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the algopass smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(
        params: BareCallArgs &
          AppClientCallCoreParams &
          CoreAppCallArgs &
          AppClientCompilationParams = {}
      ) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        };
      },
    };
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the algopass smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        };
      },
    };
  }

  /**
   * Constructs a no op call for the init_profile(pay,(string,string)[])bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static initProfile(
    args: MethodArgs<"init_profile(pay,(string,string)[])bool">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "init_profile(pay,(string,string)[])bool" as const,
      methodArgs: Array.isArray(args) ? args : [args.payment, args.urls],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the update_profile(string,string,string,(string,string)[])(string,string,string,(string,string)[]) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateProfile(
    args: MethodArgs<"update_profile(string,string,string,(string,string)[])(string,string,string,(string,string)[])">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method:
        "update_profile(string,string,string,(string,string)[])(string,string,string,(string,string)[])" as const,
      methodArgs: Array.isArray(args) ? args : [args.name, args.bio, args.uri, args.urls],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the get_profile(address)(string,string,string,(string,string)[]) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getProfile(
    args: MethodArgs<"get_profile(address)(string,string,string,(string,string)[])">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "get_profile(address)(string,string,string,(string,string)[])" as const,
      methodArgs: Array.isArray(args) ? args : [args.user],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the update_fee(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateFee(
    args: MethodArgs<"update_fee(uint64)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "update_fee(uint64)void" as const,
      methodArgs: Array.isArray(args) ? args : [args.fee],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the hello(string)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static hello(
    args: MethodArgs<"hello(string)string">,
    params: AppClientCallCoreParams & CoreAppCallArgs
  ) {
    return {
      method: "hello(string)string" as const,
      methodArgs: Array.isArray(args) ? args : [args.name],
      ...params,
    };
  }
}

/**
 * A client to make calls to the algopass smart contract
 */
export class AlgopassClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient;

  private readonly sender: SendTransactionFrom | undefined;

  /**
   * Creates a new instance of `AlgopassClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender;
    this.appClient = algokit.getAppClient(
      {
        ...appDetails,
        app: APP_SPEC,
      },
      algod
    );
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(
    result: AppCallTransactionResult,
    returnValueFormatter?: (value: any) => TReturn
  ): AppCallTransactionResultOfType<TReturn> {
    if (result.return?.decodeError) {
      throw result.return.decodeError;
    }
    const returnValue =
      result.return?.returnValue !== undefined && returnValueFormatter !== undefined
        ? returnValueFormatter(result.return.returnValue)
        : (result.return?.returnValue as TReturn | undefined);
    return { ...result, return: returnValue };
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Algopass["methods"]>(
    typedCallParams: TypedCallParams<TSignature>,
    returnValueFormatter?: (value: any) => MethodReturn<TSignature>
  ) {
    return this.mapReturnValue<MethodReturn<TSignature>>(
      await this.appClient.call(typedCallParams),
      returnValueFormatter
    );
  }

  /**
   * Idempotently deploys the algopass smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(
    params: AlgopassDeployArgs & AppClientDeployCoreParams = {}
  ): ReturnType<ApplicationClient["deploy"]> {
    const createArgs = params.createCall?.(AlgopassCallFactory.create);
    const updateArgs = params.updateCall?.(AlgopassCallFactory.update);
    const deleteArgs = params.deleteCall?.(AlgopassCallFactory.delete);
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    });
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this;
    return {
      /**
       * Creates a new instance of the algopass smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      bare(
        args: BareCallArgs &
          AppClientCallCoreParams &
          AppClientCompilationParams &
          CoreAppCallArgs &
          OnCompleteNoOp = {}
      ): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.create(args) as unknown as Promise<
          AppCallTransactionResultOfType<undefined>
        >;
      },
    };
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this;
    return {
      /**
       * Updates an existing instance of the algopass smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The update result
       */
      bare(
        args: BareCallArgs &
          AppClientCallCoreParams &
          AppClientCompilationParams &
          CoreAppCallArgs = {}
      ): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.update(args) as unknown as Promise<
          AppCallTransactionResultOfType<undefined>
        >;
      },
    };
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this;
    return {
      /**
       * Deletes an existing instance of the algopass smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The delete result
       */
      bare(
        args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}
      ): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.delete(args) as unknown as Promise<
          AppCallTransactionResultOfType<undefined>
        >;
      },
    };
  }

  /**
   * Makes a clear_state call to an existing instance of the algopass smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args);
  }

  /**
   * Calls the init_profile(pay,(string,string)[])bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public initProfile(
    args: MethodArgs<"init_profile(pay,(string,string)[])bool">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(AlgopassCallFactory.initProfile(args, params));
  }

  /**
   * Calls the update_profile(string,string,string,(string,string)[])(string,string,string,(string,string)[]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateProfile(
    args: MethodArgs<"update_profile(string,string,string,(string,string)[])(string,string,string,(string,string)[])">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(AlgopassCallFactory.updateProfile(args, params), UserRecord);
  }

  /**
   * Calls the get_profile(address)(string,string,string,(string,string)[]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getProfile(
    args: MethodArgs<"get_profile(address)(string,string,string,(string,string)[])">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(AlgopassCallFactory.getProfile(args, params), UserRecord);
  }

  /**
   * Calls the update_fee(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateFee(
    args: MethodArgs<"update_fee(uint64)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(AlgopassCallFactory.updateFee(args, params));
  }

  /**
   * Calls the hello(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public hello(
    args: MethodArgs<"hello(string)string">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {}
  ) {
    return this.call(AlgopassCallFactory.hello(args, params));
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key];
    if (!value) return undefined;
    if (!("valueRaw" in value))
      throw new Error(
        `Failed to parse state value for ${key}; received an int when expected a byte array`
      );
    return {
      asString(): string {
        return value.value;
      },
      asByteArray(): Uint8Array {
        return value.valueRaw;
      },
    };
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key];
    if (!value) return undefined;
    if ("valueRaw" in value)
      throw new Error(
        `Failed to parse state value for ${key}; received a byte array when expected a number`
      );
    return {
      asBigInt() {
        return typeof value.value === "bigint" ? value.value : BigInt(value.value);
      },
      asNumber(): number {
        return typeof value.value === "bigint" ? Number(value.value) : value.value;
      },
    };
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Algopass["state"]["global"]> {
    const state = await this.appClient.getGlobalState();
    return {
      get g_counter() {
        return AlgopassClient.getIntegerState(state, "g_counter");
      },
      get g_fee() {
        return AlgopassClient.getIntegerState(state, "g_fee");
      },
    };
  }

  public compose(): AlgopassComposer {
    const client = this;
    const atc = new AtomicTransactionComposer();
    let promiseChain: Promise<unknown> = Promise.resolve();
    const resultMappers: Array<undefined | ((x: any) => any)> = [];
    return {
      initProfile(
        args: MethodArgs<"init_profile(pay,(string,string)[])bool">,
        params?: AppClientCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.initProfile(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      updateProfile(
        args: MethodArgs<"update_profile(string,string,string,(string,string)[])(string,string,string,(string,string)[])">,
        params?: AppClientCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.updateProfile(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(UserRecord);
        return this;
      },
      getProfile(
        args: MethodArgs<"get_profile(address)(string,string,string,(string,string)[])">,
        params?: AppClientCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.getProfile(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(UserRecord);
        return this;
      },
      updateFee(
        args: MethodArgs<"update_fee(uint64)void">,
        params?: AppClientCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.updateFee(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      hello(
        args: MethodArgs<"hello(string)string">,
        params?: AppClientCallCoreParams & CoreAppCallArgs
      ) {
        promiseChain = promiseChain.then(() =>
          client.hello(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      get update() {
        const $this = this;
        return {
          bare(
            args?: BareCallArgs &
              AppClientCallCoreParams &
              AppClientCompilationParams &
              CoreAppCallArgs
          ) {
            promiseChain = promiseChain.then(() =>
              client.update.bare({
                ...args,
                sendParams: { ...args?.sendParams, skipSending: true, atc },
              })
            );
            resultMappers.push(undefined);
            return $this;
          },
        };
      },
      get delete() {
        const $this = this;
        return {
          bare(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() =>
              client.delete.bare({
                ...args,
                sendParams: { ...args?.sendParams, skipSending: true, atc },
              })
            );
            resultMappers.push(undefined);
            return $this;
          },
        };
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() =>
          client.clearState({
            ...args,
            sendParams: { ...args?.sendParams, skipSending: true, atc },
          })
        );
        resultMappers.push(undefined);
        return this;
      },
      addTransaction(
        txn:
          | TransactionWithSigner
          | TransactionToSign
          | Transaction
          | Promise<SendTransactionResult>,
        defaultSender?: SendTransactionFrom
      ) {
        promiseChain = promiseChain.then(async () =>
          atc.addTransaction(
            await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)
          )
        );
        return this;
      },
      async atc() {
        await promiseChain;
        return atc;
      },
      async execute() {
        await promiseChain;
        const result = await algokit.sendAtomicTransactionComposer(
          { atc, sendParams: {} },
          client.algod
        );
        return {
          ...result,
          returns: result.returns?.map((val, i) =>
            resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue
          ),
        };
      },
    } as unknown as AlgopassComposer;
  }
}
export type AlgopassComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the init_profile(pay,(string,string)[])bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initProfile(
    args: MethodArgs<"init_profile(pay,(string,string)[])bool">,
    params?: AppClientCallCoreParams & CoreAppCallArgs
  ): AlgopassComposer<[...TReturns, MethodReturn<"init_profile(pay,(string,string)[])bool">]>;

  /**
   * Calls the update_profile(string,string,string,(string,string)[])(string,string,string,(string,string)[]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateProfile(
    args: MethodArgs<"update_profile(string,string,string,(string,string)[])(string,string,string,(string,string)[])">,
    params?: AppClientCallCoreParams & CoreAppCallArgs
  ): AlgopassComposer<
    [
      ...TReturns,
      MethodReturn<"update_profile(string,string,string,(string,string)[])(string,string,string,(string,string)[])">
    ]
  >;

  /**
   * Calls the get_profile(address)(string,string,string,(string,string)[]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProfile(
    args: MethodArgs<"get_profile(address)(string,string,string,(string,string)[])">,
    params?: AppClientCallCoreParams & CoreAppCallArgs
  ): AlgopassComposer<
    [...TReturns, MethodReturn<"get_profile(address)(string,string,string,(string,string)[])">]
  >;

  /**
   * Calls the update_fee(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateFee(
    args: MethodArgs<"update_fee(uint64)void">,
    params?: AppClientCallCoreParams & CoreAppCallArgs
  ): AlgopassComposer<[...TReturns, MethodReturn<"update_fee(uint64)void">]>;

  /**
   * Calls the hello(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hello(
    args: MethodArgs<"hello(string)string">,
    params?: AppClientCallCoreParams & CoreAppCallArgs
  ): AlgopassComposer<[...TReturns, MethodReturn<"hello(string)string">]>;

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the algopass smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(
      args?: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs
    ): AlgopassComposer<[...TReturns, undefined]>;
  };

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the algopass smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(
      args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs
    ): AlgopassComposer<[...TReturns, undefined]>;
  };

  /**
   * Makes a clear_state call to an existing instance of the algopass smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(
    args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs
  ): AlgopassComposer<[...TReturns, undefined]>;

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(
    txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>,
    defaultSender?: SendTransactionFrom
  ): AlgopassComposer<TReturns>;
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>;
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<AlgopassComposerResults<TReturns>>;
};
export type AlgopassComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns;
  groupId: string;
  txIds: string[];
  transactions: Transaction[];
};
